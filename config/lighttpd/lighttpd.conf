server.document-root = "/var/www/htdocs"

index-file.names = ( "index.html" )

# you need to update the Dockerfile.httpd if you change this.
server.port = 8080

server.modules += ("mod_setenv",  "mod_auth", "mod_authn_file", "mod_webdav", "mod_fastcgi", "mod_proxy", "mod_ssi", "mod_accesslog" ) 

var.error_log_file          = env.HTTPD_ERROR_LOGFILE
server.errorlog             = var.error_log_file
server.breakagelog          = var.error_log_file
var.access_log_file         = env.HTTPD_ACCESS_LOGFILE
var.idsite                  = env.LOGIDSITE
accesslog.format            := "{\"idsite\":\""+var.idsite+"\",\"userid\":\"%u\",\"ip\":\"%{X-Forwarded-For}i\",\"host\":\"%V\",\"path\":\"%U?%q\",\"status\":\"%s\",\"referrer\":\"%{Referrer}i\",\"user_agent\":\"%{User-Agent}i\",\"method\":\"%m\",\"length\":\"%O\",\"generation_time_milli\":\"%{ms}T\",\"date\":\"%{%Y-%m-%dT%H:%M:%S%z}t\"}"
accesslog.filename          := var.access_log_file

$HTTP["url"] =~ "^(/iiif/images)|(/fcgi-bin/iipsrv.fcgi)" {
# setenv.set-environment = (
# "HTTPS" => "on"
# ),
# For named allowed origin use something like
# $REQUEST_HEADER["Origin"] = www.example.org {
#   setenv.add-response-header = (
#   "Access-Control-Allow-Origin" => "www.example.org"
#   ...
#   )
# } else $REQUEST_HEADER["Origin"] = www.example.com {
# } else {
  setenv.add-response-header = (
  "Access-Control-Allow-Origin" => "*",
  "Access-Control-Allow-Methods" => "HEAD, GET, OPTIONS",
  "Access-Control-Expose-Headers" => "Content-Range, Dat, Etag, Cache-Control, Last-Modified",
  "Access-Control-Allow-Headers" => "Content-Type, Origin, Accept, Range, Cache-Control",
  "Access-Control-Max-Age" => "600",
  "Timing-Allow-Origin" => "*" 
  )
}

setenv.add-environment = (
  "DEFAULT_COLLECTION" => env.DEFAULT_COLLECTION,
  "openjpeg_version" => env.openjpeg_version,
  "iipsrv_version" => env.iipsrv_version
)

$HTTP["url"] =~ "^/upload($|/)" {
  server.document-root = "/mnt/data"
  auth.backend = "htpasswd"
  auth.backend.htpasswd.userfile = "/mnt/data/uploadpasswd"
  auth.require = ( "" =>
                   (
                     "method"    => "basic",
                     "realm"     => "upload",
                     "require"   => "valid-user" 
                   )
                 )
  webdav.activate = "enable"
  webdav.is-readonly = "disable"
  webdav.sqlite-db-name = "/mnt/data/webdavdb"
}

ssi.extension = (".html")

fastcgi.server = (
  "/fcgi-bin/iipsrv.fcgi" =>
  (( "host" => env.IIPSRV,
     "port" => 9000,
     "check-local" => "disable",
  )),
  "/iiif/images" =>
  (( "host" => env.IIPSRV,
     "port" => 9000,
     "check-local" => "disable",
  ))
)

proxy.server = (
"/images" =>
(( "host" => env.NODESRV,
   "port" => 3000
)),
"/forIIIF" =>
(( "host" => env.NODESRV,
   "port" => 3000
)),
"/iiif/presentation" =>
(( "host" => env.NODESRV,
   "port" => 3000
)),
"/iiif/services" =>
(( "host" => env.NODESRV,
   "port" => 3000
)),
"/memcached" =>
(( "host" => env.NODESRV,
   "port" => 3000
))
)

mimetype.assign             = (
  ".pdf"          =>      "application/pdf",
  ".ogg"          =>      "application/ogg",
  ".gif"          =>      "image/gif",
  ".jpg"          =>      "image/jpeg",
  ".jpeg"         =>      "image/jpeg",
  ".png"          =>      "image/png",
  ".tif"          =>      "image/tiff",
  ".ico"          =>      "image/x-icon",
  ".css"          =>      "text/css",
  ".html"         =>      "text/html",
  ".htm"          =>      "text/html",
  ".js"           =>      "text/javascript",
  ".json"         =>      "application/json",
  ".map"          =>      "application/json",
  ".txt"          =>      "text/plain",
  ".dtd"          =>      "text/xml",
  ".xml"          =>      "text/xml"
 )
